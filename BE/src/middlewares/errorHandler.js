const { ApiError } = require('../utils');

// Xá»­ lÃ½ lá»—i tá»« MongoDB
const handleCastErrorDB = err => {
    const message = `GiÃ¡ trá»‹ khÃ´ng há»£p lá»‡: ${err.path}`;
    return new ApiError(400, message);
};

const handleDuplicateFieldsDB = err => {
    const value = err.errmsg.match(/(["'])(\\?.)*?\1/)[0];
    const message = `GiÃ¡ trá»‹ Ä‘Ã£ tá»“n táº¡i: ${value}. Vui lÃ²ng sá»­ dá»¥ng giÃ¡ trá»‹ khÃ¡c!`;
    return new ApiError(400, message);
};

const handleValidationErrorDB = err => {
    const errors = Object.values(err.errors).map(el => el.message);
    const message = `Dá»¯ liá»‡u khÃ´ng há»£p lá»‡. ${errors.join('. ')}`;
    return new ApiError(400, message);
};

const handleJWTError = () => new ApiError(401, 'Token khÃ´ng há»£p lá»‡. Vui lÃ²ng Ä‘Äƒng nháº­p láº¡i!');

const handleJWTExpiredError = () => new ApiError(401, 'Token Ä‘Ã£ háº¿t háº¡n. Vui lÃ²ng Ä‘Äƒng nháº­p láº¡i!');

const sendErrorDev = (err, res) => {
    res.status(err.statusCode).json({
        status: err.status,
        error: err,
        message: err.message,
        stack: err.stack
    });
};

const sendErrorProd = (err, res) => {
    // Lá»—i hoáº¡t Ä‘á»™ng, gá»­i thÃ´ng bÃ¡o Ä‘áº¿n client
    if (err.isOperational) {
        res.status(err.statusCode).json({
            status: err.status,
            message: err.message
        });
    }
    // Lá»—i láº­p trÃ¬nh hoáº·c lá»—i khÃ´ng xÃ¡c Ä‘á»‹nh, khÃ´ng gá»­i chi tiáº¿t
    else {
        // Log lá»—i
        console.error('ERROR ðŸ’¥', err);

        // Gá»­i thÃ´ng bÃ¡o chung
        res.status(500).json({
            status: 'error',
            message: 'CÃ³ lá»—i xáº£y ra!'
        });
    }
};

module.exports = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    if (process.env.NODE_ENV === 'development') {
        sendErrorDev(err, res);
    } else if (process.env.NODE_ENV === 'production') {
        let error = {...err };
        error.message = err.message;

        if (error.name === 'CastError') error = handleCastErrorDB(error);
        if (error.code === 11000) error = handleDuplicateFieldsDB(error);
        if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
        if (error.name === 'JsonWebTokenError') error = handleJWTError();
        if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

        sendErrorProd(error, res);
    }
};